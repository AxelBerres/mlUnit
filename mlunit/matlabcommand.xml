<?xml version="1.0" encoding="UTF-8"?>
<!--
  This Software and all associated files are released unter the 
  GNU General Public License (GPL), see LICENSE for details.

  $Id$
  -->

<project name="matlabcommand" default="checkmatlab" xmlns:if="ant:if">
  <description>
  MATLAB command task. Open MATLAB, invoke your command, which may
  consist of several commands, close MATLAB again.

  Use &lt;import&gt; to include matlabcommand in your Ant script. Then use the
  matlabcommand task in your build targets. Provide a matlab.exec property to
  the &lt;matlabroot&gt;/bin/win64/MATLAB.exe location you want to use
  (change to win32 for 32-bit MATLAB).
  Alternatively, provide a matlab.root property, only referencing the MATLAB
  directory. If none of these properties is given,
  matlabcommand will try to call the MATLAB version that is on the cmd shell
  search path.

  You can only do this once in the same Ant session. In fact, you can execute
  the matlabcommand task as many times you want, but only with the same
  matlab.exec/matlab.root configuration within this session.
  This is in effect from the time either the matlabcommand task, or
  the checkmatlab target executes for the first time. Your input property
  (matlab.exec or matlab.root) needs to be defined at that time.

  The matlabcommand task takes these attributes:

    - "command.string" The MATLAB command string to execute. Mandatory.
    - "command.dir" Directory that will be added to the MATLAB path
        before executing the actual command. May be left empty.
    - "logfile" The location of the MATLAB log file. May be left empty.
        If left empty, defaults to "matlabcommand_temp.log".
    - "output.property" The name of an Ant property that will receive the
        command line output of the MATLAB execution.
    - "success.property" The name of an Ant property that will be true if
        the MATLAB execution succeeded, or false if not.
    
  You may use the included checkmatlab target as dependency for your targets.
  checkmatlab raises an Ant runtime error if you specified a matlab.exec property
  that refers to a non-existant file, or if you specified a matlab.root property
  that is not a proper MATLAB's root directory, or if you specified none of
  these and MATLAB could not be found on the cmd shell search path.
  </description>

  <condition property="is_windows">
    <os family="windows"/>
  </condition>

  <condition property="is_unix">
    <os family="unix"/>
  </condition>

  <!-- Macro that opens MATLAB and calls a specified command.
       commanddir attribute will be added as search path via addpath().
       For argument description see:
       http://www.mathworks.de/help/techdoc/ref/matlabwindows.html -->
  <!-- TODO: set @{logfile} to temporary file by default. -->
  <macrodef name="matlabcommand">

    <attribute name="command.string"/>
    <attribute name="command.dir" default=""/>
    <!-- logfile must not be empty; we need it to query the result status -->
    <attribute name="logfile" default="matlabcommand_temp.log"/>
    <attribute name="output.property" default=""/>
    <attribute name="success.property" default="no.matlab.success.property"/>

    <sequential>
        <property name="error.signature" value="MATLAB threw error"/>
        <construct-matlab-exec/>
        <construct-release-specific-args/>
        <echo message="Using MATLAB: ${matlab.exec}"/>

        <!-- Calling MATLAB by means of its core executable, e.g.
             matlabroot/bin/win32/matlab.exe, not a delegate executable, e.g.
             matlabroot/bin/matlab.exe or matlab.bat. The delegate executables
             sometimes return before MATLAB is finished, and sometimes do not
             route output through stdout and stderr on releases prior to R2015b.
             We let MATLAB write its output on stdout/stderr, so that users
             can see the progress as MATLAB runs, and write it into a log file
             afterwards. -->
        
        <exec executable="${matlab.exec}">
          <!-- <exec>'s logError attribute only applies if also using output/
               outputproperty, but not error/errorproperty; then logError only
               includes stdout, but not stderr, which goes to Ant's stdout, as
               it would have without using output/outputproperty. -->
          <!-- by default: spawn="false" failonerror="false" -->
          <arg value="-automation"/>
          <arg value="-nosplash"/>
          <arg value="-nodesktop"/>
          <!--arg value="-nojvm"/  yields options conflict with, presumably, -automation-->
          <!-- -wait option only valid for delegate executables on newer MATLABs -->
          <arg value="-r"/>
          <arg value="addpath('@{command.dir}');try;@{command.string};catch;err=lasterror;disp('${error.signature}');disp(err.message);end;exit;"/>
          <arg value="${release-specific-args}"/>
          
          <!-- Newer MATLABs (e.g. R2018b) do not output to stdout anymore.
               However, if using the '-log' flag, they do, only to
               stderr instead of stdout, for whatever reason.
               Unfortunately, you can only choose '-log', or '-logfile', not both.
               As we want to see MATLAB's output live on Ant's stdout, and also
               put it in a log file at the same time, and check its contents in
               an Ant property, we use Ant's redirector to mirror
               MATLAB's stderr to Ant's stdout and a log file. -->
          <redirector alwayslog="true" outputproperty="partial.output" errorproperty="partial.error"/>
          <!-- with 'alwayslog', 'logError="false"', and outputproperty, the console
               gets the text double. This would be the approach that worked on old
               and new MATLAB versions, however does not work due to an Ant bug:
               https://bz.apache.org/bugzilla/show_bug.cgi?id=53506
               -->
        </exec>

        <!-- Construct output from the concatenation of stdout and stderr.
             We expect only one of those to contain text, therefore we
             do not need a ${line.separator}. -->
        <property name="@{output.property}" value="${partial.output}${partial.error}"/>

        <!-- write logfile -->
        <echo file="@{logfile}" message="${@{output.property}}"/>

        <!-- mark succeeded if we do not find the error signature. -->
        <condition property="@{success.property}">
          <not>
            <contains string="${@{output.property}}" substring="${error.signature}"/>
          </not>
        </condition>
    </sequential>
  </macrodef>


  <macrodef name="get-matlab-from-path">
    <sequential>
      <!-- get matlab.exe from path, use this rather than the "where" cmd, in
           order to also work on Windows XP -->
      <exec executable="cmd.exe" outputproperty="delegator.matlab.exec" if:true="${is_windows}">
        <arg value="/C"/>
        <arg value="for %i in (matlab.exe) do @echo.%~$PATH:i"/>
      </exec>
      
      <exec executable="bash" outputproperty="delegator.matlab.exec" if:true="${is_unix}">
        <arg value="which"/>
        <arg value="matlab"/>
      </exec>
    </sequential>
  </macrodef>


  <!-- Looks for a matlab.root property if available, or defines one from the
       system path if not. Then defines a matlab.exec property.
       Can only use this once in the same Ant environment,
       but not again in the same session with different values. -->
  <macrodef name="construct-matlab-exec">
    <sequential>

        <condition property="user.defined.matlab.root" value="true">
            <isset property="matlab.root"/>
        </condition>

        <!-- construct a matlab.root property from the system path, if not given by the user -->
        <get-matlab-from-path/>
        <dirname property="matlab.root" file="${delegator.matlab.exec}"/>

        <!-- Construct a matlab.exec property from the matlab.root in a way that
             it definitely points to the core MATLAB executable (not any
             delegating executables), from either matlabroot directly, or its
             bin or bin/win32 or bin/win64 sub directories.
             This works, because the first definition of matlab.exec can never
             be changed. -->

        <!-- Construct matlab.exec from a matlab.root that points to the correct root dir -->
        <property name="matlabroot.bin.win64.exec" location="${matlab.root}/bin/win64/MATLAB.exe"/>
        <condition property="matlab.exec" value="${matlabroot.bin.win64.exec}">
            <available file="${matlabroot.bin.win64.exec}" type="file"/>
        </condition>
        
        <property name="matlabroot.bin.win32.exec" location="${matlab.root}/bin/win32/MATLAB.exe"/>
        <condition property="matlab.exec" value="${matlabroot.bin.win32.exec}">
            <available file="${matlabroot.bin.win32.exec}" type="file"/>
        </condition>

        <!-- Construct matlab.exec from a matlab.root that to <matlabroot>/bin -->
        <property name="matlabroot.win64.exec" location="${matlab.root}/win64/MATLAB.exe"/>
        <condition property="matlab.exec" value="${matlabroot.win64.exec}">
            <available file="${matlabroot.win64.exec}" type="file"/>
        </condition>

        <property name="matlabroot.win32.exec" location="${matlab.root}/win32/MATLAB.exe"/>
        <condition property="matlab.exec" value="${matlabroot.win32.exec}">
            <available file="${matlabroot.win32.exec}" type="file"/>
        </condition>

        <!-- Construct matlab.exec from a matlab.root that points <matlabroot>/bin/win64 -->
        <property name="matlabroot.exec" location="${matlab.root}/MATLAB.exe"/>
        <condition property="matlab.exec" value="${matlabroot.exec}">
            <available file="${matlabroot.exec}" type="file"/>
        </condition>
      

        <fail message="Could not find MATLAB. No matlab.exec property was given. A matlab.root property was given, but was not a valid MATLAB root directory: '${matlab.root}'.">
          <condition>
            <and>
              <not>
                <isset property="matlab.exec"/>
              </not>
              <isset property="user.defined.matlab.root"/>
            </and>
          </condition>
        </fail>

        <fail message="Could not find MATLAB. No matlab.exec property was given. Also, no matlab.root property was given, and MATLAB could not be found on the path.">
          <condition>
            <and>
              <not>
                <isset property="matlab.exec"/>
              </not>
              <not>
                <isset property="user.defined.matlab.root"/>
              </not>
            </and>
          </condition>
        </fail>
    </sequential>
  </macrodef>

  <!-- MATLAB R2015b and newer don't output on stdout anymore. Using the
       undocumented command argument -log, they output on stderr, which
       we use. However, older MATLABs don't understand -log and output
       a message, distracting the user. Therefore on older MATLABs we
       need to map -log to an empty argument.
       For that purpose, we call "matlab -help", which outputs a version
       string. We need to call the delegate <matlabroot/bin/MATLAB.exe,
       as only this outputs the help text. It also does not start MATLAB,
       and therefore finishes quickly. -->
  <macrodef name="construct-release-specific-args">
    <sequential>
      <!-- Construct from final matlab.exec -->
      <dirname property="matlab.exec.dir" file="${matlab.exec}"/>

      <!-- Construct matlab.help.exec from a matlab.exec.dir that points to the core MATLAB.exe -->
      <property name="matlab.oneup.help.exec" location="${matlab.exec.dir}/../matlab.exe"/>
      <condition property="matlab.help.exec" value="${matlab.oneup.help.exec}">
        <available file="${matlab.oneup.help.exec}" type="file"/>
      </condition>
      <!-- Construct matlab.help.exec from a matlab.exec.dir that points to the delegate MATLAB.exe -->
      <property name="matlab.help.exec" location="${matlab.exec.dir}/matlab.exe"/>

      <!-- call by "cmd /c matlab -help & rem" in order to suppress output of the return result of -1 -->
      <exec executable="cmd" outputproperty="help.text" if:true="${is_windows}">
        <arg value="/c"/>
        <arg value="&quot;${matlab.help.exec}&quot; -help &amp; rem"/>
      </exec>

      <!-- Recognize versions 7.5 (R2007b) through 7.14 (2012a), and 
           versions 8.0 (R2012b) through 8.5 (R2015a).
           We don't support earlier versions, and switch to the -log option for
           newer versions (R2015b and later). -->
      <condition property="release-specific-args" value="" else="-log" if:true="${is_windows}">
        <matches pattern="Version: (7\.[5-9]|7\.1[0-4]|8\.[0-5])\.[0-9]+,[0-9]+" string="${help.text}"/>
      </condition>

      <property name="release-specific-args" value="-logfile" if:true="${is_unix}"/>

      <echo message="Determined release specific arguments: ${release-specific-args}"/>
    </sequential>
  </macrodef>


  <!-- Targets -->

  <target name="checkmatlab" description="Asserts that matlab.exec property is valid.">

    <construct-matlab-exec/>

    <!-- fail if matlab.exec is given or could be constructed, but not available -->
    <fail message="MATLAB executable was established, but could not be found: matlab.exec=&quot;${matlab.exec}&quot;">
      <condition>
        <and>
          <isset property="matlab.exec"/>
          <not>
            <available file="${matlab.exec}" type="file"/>
          </not>
        </and>
      </condition>
    </fail>
  </target>
</project>
