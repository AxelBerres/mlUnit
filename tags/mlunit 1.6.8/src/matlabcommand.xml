<?xml version="1.0" encoding="utf-8"?>
<!--
  This Software and all associated files are released unter the 
  GNU General Public License (GPL), see LICENSE for details.

  $Id$
  -->

<project name="matlabcommand" default="checkmatlab">
  <description>
  Provides MATLAB task.
  Use &lt;import&gt; to include matlabcommand in your Ant script. Then use the
  matlabcommand task in your build targets. Provide a matlab.exec property to
  the matlab.bat location you want matlabcommand to use. If no such property is
  given, matlabcommand will try to call the MATLAB version that is on the cmd shell
  search path. If no MATLAB executable could be found there, you will know by
  means of a very ugly Java stack trace.
  The matlabcommand task takes these attributes:

    - "command.string" The MATLAB command string to execute. Mandatory.
    - "command.dir" Directory that will be added to the MATLAB path
        before executing the actual command. May be left empty.
    - "logfile" The location of the MATLAB log file. May be left empty.
    - "output.property" The name of an Ant property that will receive the
        command line output of the MATLAB execution.
    - "success.property" The name of an Ant property that will be true if
        the MATLAB execution succeeded, or false if not.
    
  You may use the included checkmatlab target as dependency for your targets.
  checkmatlab raises an Ant runtime error if you specified a matlab.exec property
  that refers to a non-existant file.
  </description>

  <!-- Macro that opens MATLAB and calls a specified command.
       commanddir attribute will be added as search path via addpath().
       For argument description see:
       http://www.mathworks.de/help/techdoc/ref/matlabwindows.html -->
  <!-- TODO: set @{logfile} to temporary file by default. -->
  <macrodef name="matlabcommand">

    <attribute name="command.string"/>
    <attribute name="command.dir" default=""/>
    <attribute name="logfile" default=""/>
    <attribute name="output.property" default=""/>
    <attribute name="success.property" default="no.matlab.success.property"/>

    <sequential>
        <property name="error.signature" value="MATLAB threw error"/>
        <!-- try to use matlab on cmd/shell path if no executable given -->
        <condition property="matlab.exec" value="matlab.bat">
          <not>
            <isset property="matlab.exec"/>
          </not>
        </condition>

        <!-- Calling MATLAB by means of its batch startup files, no output will
             be given on the console. We do not want to enforce people only
             referencing the MATLAB.exe, so we do not use the outputproperty
             attribute. Instead, we let MATLAB write its output into a log file
             and query its contents. If the MATLAB.exe is used, however, then
             some options may not be recognized (-wait) and the output may
             appear several times. -->
        <exec executable="${matlab.exec}" logError="true">
          <!-- by default: spawn="false" failonerror="false" -->
          <arg value="-automation"/>
          <arg value="-nosplash"/>
          <arg value="-nodesktop"/>
          <!-- We may actually have that jvm at a later time... -->
          <!--arg value="-nojvm"/  yields options conflict with, presumably, -automation-->
          <!--arg value="-wait"/  not supported under Windows-->
          <arg value="-r"/>
          <arg value="addpath('@{command.dir}');try;@{command.string};catch;err=lasterror;disp('${error.signature}');disp(err.message);end;exit;"/>
          <arg value="-logfile"/>
          <arg value="@{logfile}"/>
        </exec>

        <!-- Instead of actual MATLAB output, which may be empty, return content
             of the logfile. -->
        <loadfile property="@{output.property}" srcfile="@{logfile}"/>

        <!-- mark succeeded if we do not find the error signature. -->
        <condition property="@{success.property}">
          <not>
            <contains string="${@{output.property}}" substring="${error.signature}"/>
          </not>
        </condition>

        <!-- echo output on console to be logged in ${antlog} as well -->
        <!-- only necessary when calling matlab.bat, not matlab.exe -->
        <!--echo message="${@{output.property}}"/-->
    </sequential>
  </macrodef>


  <!-- Targets -->

  <target name="checkmatlab" description="Asserts that matlab.exec property is valid.">
    <!-- fail if matlab.executable is given, but not available -->
    <fail message="MATLAB executable was not defined. Define matlab.exec property and run again.">
      <condition>
        <not>
          <isset property="matlab.exec"/>
        </not>
      </condition>
    </fail>
    <fail message="MATLAB executable was defined but could not be found: matlab.exec=&quot;${matlab.exec}&quot;">
      <condition>
        <not>
          <available file="${matlab.exec}" type="file"/>
        </not>
      </condition>
    </fail>
  </target>
</project>

