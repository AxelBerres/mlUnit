<?xml version="1.0" encoding="utf-8"?>
<!--
  This Software and all associated files are released unter the 
  GNU General Public License (GPL), see LICENSE for details.

  $Id$
  -->

<project name="mlUnit execution" default="test">
  <description>
  Provides mlUnit test execution.
  Either call Ant directly on this file, or use the &lt;ant&gt; task to add
  an mlUnit build step to your Ant script. When using the &lt;ant&gt; task,
  set the "useNativeBasedir" attribute to "true".
  Check twice.
  Configure mlUnit by defining these properties:
  
    - "source.dir" The location of your MATLAB source files that want testing.
    - "source.dirs" Reference. If you have multiple source directories,
        define a dirset collection with id "source.dirs". Do not define
        the source.dir property in that case. You also have to set the inheritRefs
        attribute for the &lt;ant&gt; task to "true" or define a nested
        &lt;resource&gt; definition. Defaults to mlUnit's source directory.
        If you need to have it empty, use exclude="**".
    - "source.dir.shallow" The same as "source.dir", but does not work
        recursively.
    - "source.dirs.shallow" The same as "source.dirs" but does not work
        recursively. Defaults to empty, having no effect.
    - "test.dir" The location of your MATLAB test files.
    - "mlunit.dir" The location of this mlUnit installation. May be left
        empty if you have set the useNativeBasedir attribute to true. Have you?
    - "report.dir" The location where the test reports and log files go to.
    - "matlab.root" installation directory of the MATLAB to be run.
        If not defined, be sure that MATLAB is on your cmd shell's search path.
        Optional. If neither matlab.root nor matlab.exec is used, the first
        MATLAB executable on the system path is used.
    - "matlab.exec" MATLAB core executable, e.g. matlabroot/bin/win32/MATLAB.exe.
        Take care to not reference a delegate executable, e.g. bin/MATLAB.exe or
        even matlab.bat! If unsure, use the matlab.root property instead.
        Optional. See matlab.root.
    - "additional.cmd" Any MATLAB command you wish to execute just before mlUnit
        execution.

  For testing mlUnit, call Ant with this very build script and provide just the
  matlab.root property, like this:

    >> ant -Dmatlab.root="C:\Program Files\MATLAB\R2007b"

  Or even try the MATLAB on the system path, like this:

    >> ant
  </description>
    
  <!-- Pull in MATLAB executor -->
  <import file="matlabcommand.xml"/>
  
  <property name="mlunit.dir" location="${basedir}/.."/>
  <property name="mlunit.src.dir" location="${basedir}"/>
  
  <!-- References must be defined outside the targets, in order to let them be
       overridded by calling instances. They must be used inside the target, on
       the other hand, in order to make inheritance really work.
       -->
  <dirset id="source.dirs" dir="${mlunit.dir}" casesensitive="yes">
    <include name="src"/>
  </dirset>
  <dirset id="source.dirs.shallow" dir="${mlunit.dir}" casesensitive="yes">
    <include name=""/>
  </dirset>


  <!-- Test target -->
  <target name="test" depends="checkmatlab" description="Execute mlUnit unit tests.">

    <!-- Expected properties. May be provided by caller, either as command line
         argument, or from within an outer calling Ant file. By default set to
         test MUC itself.
         These must be defined in the target, not outside of it. Else, the
         inheritance may break. -->
    <property name="test.dir" location="${mlunit.dir}/test"/>
    <property name="report.dir" location="${mlunit.dir}/test/reports"/>
    <property name="additional.cmd" value=""/>
    <pathconvert property="source.dir" pathsep="'), genpath('" refid="source.dirs"/>
    <pathconvert property="source.dir.shallow" pathsep="', '" refid="source.dirs.shallow"/>

    <tstamp>
      <format property="time.now" pattern="yyyy-MM-dd-HHmm"/>
    </tstamp>
    <property name="unittest.log" location="${report.dir}/tests-${time.now}.log"/>
    <property name="addsourcepathscmd" value="addpath(genpath('${source.dir}'))"/>
    <property name="addshallowsourcepathscmd" value="addpath('${source.dir.shallow}')"/>
    <property name="additionalusercmd" value="try;${additional.cmd};catch;disp(['Your additional MATLAB command failed with message: ' lasterr '.']);end"/>

    <mkdir dir="${report.dir}"/>

    <matlabcommand command.string="addpath(genpath('${mlunit.src.dir}'));${addsourcepathscmd};${addshallowsourcepathscmd};mlunit_param('linked_trace',false);mlunit_param('abbrev_trace',false);${additionalusercmd};recursive_test_run('${test.dir}', '${report.dir}')"
                   output.property="unittests.output"
                   success.property="unittests.success"
                   logfile="${unittest.log}"/>
    <fail message="One or more unit tests failed. See log file &quot;${unittest.log}&quot;.">
      <condition>
        <or>
          <contains string="${unittests.output}" substring="FAILED"/>
          <not><isset property="unittests.success"/></not>
        </or>
      </condition>
    </fail>
  </target>

</project>
