<?xml version="1.0" encoding="utf-8"?>
<!--
  This Software and all associated files are released unter the 
  GNU General Public License (GPL), see LICENSE for details.

  $Author$
  $Id$
  -->

<project name="mlUnit execution" default="test">
  <description>
  Provides mlUnit test execution.
  Use the &lt;ant&gt; task to call this buile file's default target.
  Set the "useNativeBasedir" attribute to "true".
  Check twice.
  Define these properties for mlUnit configuration:
  
    - "source.dir" The location of your MATLAB source files that want testing.
    - "source.dirs" Reference. If you have multiple source directories,
        define a dirset collection with id "source.dirs". Do not define
        the source.dir property in that case. You also have to set the inheritRefs
        attribute for the &lt;ant&gt; task to "true" or define a nested
        &lt;resource&gt; definition.
    - "source.dir.shallow" The same as "source.dir", but does not work
        recursively.
    - "source.dirs.shallow" The same as "source.dirs" but does not work
        recursively.
    - "test.dir" The location of your MATLAB test files.
    - "mlunit.dir" The location of this mlUnit installation. May be left
        empty if you have set the useNativeBasedir attribute to true. Have you?
    - "report.dir" The location where the test reports and log files go to.
    - "matlab.exec" The location of the matlab.bat of the MATLAB installation
        to be run. If left empty, be sure that MATLAB is on your cmd shell's search
        path or prepare for Java stack traces coming your way.

  For testing mlUnit, call Ant with this very build script and provide just the
  matlab.exec property, like this:

    - ant -Dmatlab.exec="C:\Program Files\MATLAB\R2007b\bin\matlab.bat"
  </description>
    
  <!-- Pull in MATLAB executor -->
  <import file="matlabcommand.xml"/>
  
  <property name="mlunit.dir" location="${basedir}"/>
  <property name="mlunit.src.dir" location="${mlunit.dir}/src"/>
  <!-- Needed for calculating MUC dependent default values. -->
  <property name="muc.basedir" location=".."/>

  <!-- References must be defined outside the targets, in order to let them be
       overridded by calling instances. They must be used inside the target, on
       the other hand, in order to make inheritance really work.
       -->
  <dirset id="source.dirs" dir="${muc.basedir}" casesensitive="yes">
    <include name="src"/>
  </dirset>
  <dirset id="source.dirs.shallow" dir="${muc.basedir}" casesensitive="yes">
    <include name=""/>
  </dirset>


  <!-- Test target -->
  <target name="test" depends="checkmatlab" description="Execute mlUnit unit tests.">

    <!-- Expected properties. May be provided by caller, either as command line
         argument, or from within an outer calling Ant file. By default set to
         test MUC itself.
         These must be defined in the target, not outside of it. Else, the
         inheritance may break. -->
    <property name="test.dir" location="${muc.basedir}/test"/>
    <property name="report.dir" location="${muc.basedir}/test/reports"/>
    <property name="additional.cmd" value=""/>
    <pathconvert property="source.dir" pathsep="'), genpath('" refid="source.dirs"/>
    <pathconvert property="source.dir.shallow" pathsep="', '" refid="source.dirs.shallow"/>

    <tstamp>
      <format property="time.now" pattern="yyyy-MM-dd-HHmm"/>
    </tstamp>
    <property name="unittest.log" location="${report.dir}/tests-${time.now}.log"/>
    <property name="addsourcepathscmd" value="addpath(genpath('${source.dir}'))"/>
    <property name="addshallowsourcepathscmd" value="addpath('${source.dir.shallow}')"/>
    <property name="additionalusercmd" value="try;${additional.cmd};catch;disp(['Your additional MATLAB command failed with message: ' lasterr '.']);end"/>

    <mkdir dir="${report.dir}"/>

    <matlabcommand command.string="addpath(genpath('${mlunit.src.dir}'));${addsourcepathscmd};${addshallowsourcepathscmd};${additionalusercmd};recursive_test_run('${test.dir}', '${report.dir}')"
                   output.property="unittests.output"
                   success.property="unittests.success"
                   logfile="${unittest.log}"/>
    <fail message="One or more unit tests failed. See log file &quot;${unittest.log}&quot;.">
      <condition>
        <or>
          <contains string="${unittests.output}" substring="FAILED"/>
          <not><isset property="unittests.success"/></not>
        </or>
      </condition>
    </fail>
  </target>

</project>
