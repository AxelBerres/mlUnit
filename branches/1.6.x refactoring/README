=================
   m l U n i t
=================

mlUnit is a unit test framework for the MATLAB M language.
It follows patterns of the xUnit family, including assertions,
test cases and suites as well as the fixture.

In contrast to MATLAB's own unit test framework:

* mlUnit outputs jUnit compatible XML reports
* mlUnit is compatible with Your MATLAB (not just R2013b), down to R2006b
* mlUnit offers specialised assert functions, e.g. assert_empty, assert_warning,
  and many more.

This software and all associated files are released unter the GNU General 
Public License (GPL) as published by the Free Software Foundation (see 
LICENSE file).

===========================================================================


PREPARATION


mlUnit may be installed (paths registered in MATLAB), or employed dynamically
on a per-use base.


INSTALLATION

1. Unzip mlunit.zip to $HOME.
2. Change to directory in MATLAB:

   >> cd $HOME/mlunit/src

3. Add directory to MATLAB path:

   >> addpath('$HOME/mlunit/src');


DYNAMICAL EMPLOYMENT

1. Add all source file directories to the MATLAB search path.
2. Add mlUnit to the MATLAB search path, including sub directories.
   Alternatively, call the setpath.m script in this directory.
3. Add test file directories to the MATLAB search path. Necessary for test
   scripts that call test function from other directories. Not needed else.
   mlUnit will change the working directory for each test script to its
   directory. That way, test scripts may use relative paths to refer to data in
   sub directories, e.g. images.

===========================================================================


USAGE


Execute mlUnit manually or automatically from within MATLAB, or
fully automatized from your Ant automation script or the Windows console.


Manual Execution
----------------

Execute run(mlunit). Provide the name of a test script file in the
dialog and apply.


Automatic Execution
-------------------

Execute recursive_test_run. Provide one input argument: The full path to the
test directory. Provide an optional second input argument: The full path to the
target directory receiving the jUnit XML reports.


Ant automation
--------------

You may skip all of the above steps, even preparation, and execute
your unit tests with an Apache Ant script, or on the Windows console.

In your own Ant script, define a property named matlab.exec that defines the
location of the matlab.bat contained in the MATLAB installation you want to
invoke. Make a call like <ant antfile="mlunit/build.xml"/> to execute all unit
tests and receive the jUnit XML reports. Read build.xml's description for
further instructions.

On the console, make sure to have Ant on your path. Then call Ant with the
matlab.exec property set to your MATLAB executable. E.g.:

    ant -Dmatlab.exec="C:\Program Files\MATLAB\R2007b\bin\win32\MATLAB.exe"

===========================================================================


HOW TO TEST


As an example a test for the built-in sin function is written:

1. Create a new directory @test_sin: 

   >> mkdir @test_sin
   >> cd @test_sin

2. Create a new .m file test_sin.m (the constructor):

   >> edit test_sin.m

3. Add the following lines to test_sin.m:

   function self = test_sin(name)

   tc = test_case(name);
   self = class(struct([]), 'test_sin', tc);

4. Create a new file test_null.m (the first test) and add the following 
   lines:

   function self = test_null(self)

   assert_equals(0, sin(0));

5. Run the test:

   >> cd('sample');
   >> run(mlunit);

   Enter 'test_sin' and press 'Run'.
   You should see a green bar and the text:

   Runs: 1 / Errors: 0 / Failures: 0

6. Add more tests, e.g. test_sin_cos.m:

   function self = test_sin_cos(self)

   assert_equals(cos(0), sin(pi/2));

7. Rerun the tests:

   Press 'Run' again. You should see the text:

   Runs: 2 / Errors: 0 / Failures: 0

===========================================================================


PARAMETERS AND BRIDGING FIXTURES


You can define parameters in order to change mlUnit's behaviour. For example,
in order to let assert_equals handle NaN values as equal, call:

   >> mlunit_param('equal_nans', true);

You should do this in a test suite's set_up fixture. As of mlUnit 1.6.8, this
won't affect other suite's tests anymore, i.e. declare equal NaNs for just one
suite, but not the others. Changes to mlUnit parameters, that are effected in
either the test function, or the set_up and tear_down fixtures, will be reverted
after each test's tear_down execution.

You can use these parameters for your own purposes, too. Just be careful
not to employ names known to mlUnit. Check the list of known parameters with:

   >> help mlunit_param

That being said, you can use parameters for your own purposes,
e.g. to bridge information between fixture calls.
For example, if you calculate some path name in your set_up fixture,
and want to access it in your tear_down fixture, store it as an mlUnit
parameter. Although file and directory dependencies are generally discouraged
in unit tests and should be avoided where possible, let this serve as example:

   function set_up
      % open file for reading
      fid = fopen('my/path/myfile.txt');
      % remember file id
      mlunit_param('my_precious_fid', fid);

   function tear_down
      % recall file id and close it
      fid = mlunit_param('my_precious_fid');
      fclose(fid);

===========================================================================


MLUNIT TESTS


As mlUnit was developed loosely test-driven, there are a number of tests in the
test directory, which can be run by

>> recursive_test_run('$MLUNIT\mlunit\test')

===========================================================================


MIGRATION

With 1.6.8, there are several usage changes. In lack of a current write-up,
please consult the CHANGES.txt for the 1.6.8 release.

With 1.6.4, assert() is no mlUnit function anymore. Replace your assert()
calls with calls to assert_true() in test cases. In places where you actually
want to assert a constraint in production code rather than a test case, use the
MATLAB built-ins assert() or error().

===========================================================================


QUESTIONS, COMMENTS, BUGS

If you have a question, a comment or a bug report, please send an email to 
any of the maintainers.
