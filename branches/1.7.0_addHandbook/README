=================
   m l U n i t
=================

mlUnit is a unit test framework for the MATLAB M language.

===========================================================================


ABOUT


mlUnit is a testing framework for the MATLAB .m language, considering the 
patterns of the xUnit family.

This software and all associated files are released unter the GNU General 
Public License (GPL) as published by the Free Software Foundation (see 
LICENSE file).

===========================================================================


PREPARATION


mlUnit may be installed (paths registered in MATLAB), or employed dynamically
on a per-use base.


INSTALLATION

1. Unzip mlunit.zip to $HOME.
2. Change to directory in MATLAB:

   >> cd $HOME/mlunit/src

3. Add directory to MATLAB path:

   >> addpath('$HOME/mlunit/src');


DYNAMICAL EMPLOYMENT

1. Add all source file directories to the MATLAB search path.
2. Add mlUnit to the MATLAB search path, including sub directories.
   Alternatively, call the setpath.m script in this directory.
3. Add test file directories to the MATLAB search path. Necessary for test
   scripts that call test function from other directories. Not needed else.
   mlUnit will change the working directory for each test script to its
   directory. That way, test scripts may use relative paths to refer to data in
   sub directories, e.g. images.

===========================================================================


USAGE


Execute mlUnit manually or automatically from within MATLAB, or
fully automatized from your Ant automation script or the Windows console.


Manual Execution
----------------

Execute run(gui_test_runner). Provide the name of a test script file in the
dialog and apply.


Automatic Execution
-------------------

Execute recursive_test_run. Provide one input argument: The full path to the
test directory. Provide an optional second input argument: The full path to the
target directory receiving the jUnit XML reports.


Ant automation
--------------

You may skip all of the above steps, even preparation, and execute
your unit tests with an Apache Ant script, or on the Windows console.

In your own Ant script, define a property named matlab.exec that defines the
location of the matlab.bat contained in the MATLAB installation you want to
invoke. Make a call like <ant antfile="mlunit/build.xml"/> to execute all unit
tests and receive the jUnit XML reports. Read build.xml's description for
further instructions.

On the console, make sure to have Ant on your path. Then call Ant with the
matlab.exec property set to your MATLAB executable. E.g.:

    ant -Dmatlab.exec="C:\Program Files\MATLAB\R2007b\bin\win32\MATLAB.exe"

===========================================================================


HOW TO TEST


As an example a test for the built-in sin function is written:

1. Create a new directory @test_sin: 

   >> mkdir @test_sin
   >> cd @test_sin

2. Create a new .m file test_sin.m (the constructor):

   >> edit test_sin.m

3. Add the following lines to test_sin.m:

   function self = test_sin(name)

   tc = test_case(name);
   self = class(struct([]), 'test_sin', tc);

4. Create a new file test_null.m (the first test) and add the following 
   lines:

   function self = test_null(self)

   assert_equals(0, sin(0));

5. Run the test:

   >> cd ..
   >> runner = text_test_runner(1, 1);
   >> loader = test_loader;
   >> run(runner, load_tests_from_test_case(loader, 'test_sin'));

   You should see something like this:

   .
   ----------------------------------------------------------------------
   Ran 1 test in 0.010s
   
   OK

6. Add more tests, e.g. test_sin_cos.m:

   function self = test_sin_cos(self)

   assert_equals(cos(0), sin(pi/2));

7. Run the tests:

   >> run(runner, load_tests_from_test_case(loader, 'test_sin'));
  
   You should see something like this:

   ..
   ----------------------------------------------------------------------
   Ran 2 tests in 0.010s
   
   OK

8. Try other parameters of text_test_runner:

   >> runner = text_test_runner(1, 2);
   >> run(runner, load_tests_from_test_case(loader, 'test_sin'));

   You should see something like this:

   test_null(test_sin) ... OK
   test_sin_cos(test_sin) ... OK

   ----------------------------------------------------------------------
   Ran 2 tests in 0.020s

   OK

9. Read more in the help texts of the classes, e.g.

   >> help text_test_runner

===========================================================================


MLUNIT TESTS


As mlUnit was developed test-driven, there are a number of tests in the 
test directory, which can be run by

>> addpath('$MLUNIT\mlunit\test');
>> mlunit_test;

The function recursive_test_run uses genpath to build a list of
subdirectories. Therefore, it can not be used to run the mlUnit internal
test cases. The Ant automation won't work either, because it, in turn, uses
the recursive_test_run function.

===========================================================================


MIGRATION

From 1.6.4 onward, assert() is no mlUnit function anymore. Replace your assert()
calls with calls to assert_true() in test cases. In places where you actually
want to assert a constraint in production code rather than a test case, use the
MATLAB built-in assert().

===========================================================================


MORE DOCUMENTATION


More documentation can be found online at <http://mlunit.sourceforge.net>.

===========================================================================

QUESTIONS, COMMENTS, BUGS

If you have a question, a comment or a bug report, please send an email to 
any of the maintainers.
